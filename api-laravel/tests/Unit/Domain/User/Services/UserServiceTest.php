<?php

namespace Tests\Unit\Domain\User\Services;

use Tests\TestCase;
use App\Domain\User\Services\UserService;
use App\Domain\User\Repositories\UserRepository;
use App\Domain\User\Models\User;
use Mockery;

class UserServiceTest extends TestCase
{
    protected $userRepositoryMock;
    protected $userService;

    protected function setUp(): void
    {
        parent::setUp();

        $this->userRepositoryMock = Mockery::mock(UserRepository::class);
        $this->userService = new UserService($this->userRepositoryMock);
    }

    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown();
    }

    /**
     * Tests that the getUserByEmail method of the UserService returns a User instance
     * with the expected email address when queried with a specific email.
     *
     * It mocks the UserRepository to return a User object with the provided email
     * and verifies that the method returns an instance of the User class with the
     * same email.
     */
    public function testGetUserByEmail()
    {
        $email = 'test@example.com';
        $user = User::factory()->make(['email' => $email]);

        $this->userRepositoryMock
            ->shouldReceive('getUserByEmail')
            ->with($email)
            ->once()
            ->andReturn($user);

        $result = $this->userService->getUserByEmail($email);

        $this->assertInstanceOf(User::class, $result);
        $this->assertEquals($email, $result->email);
    }

    /**
     * Tests that the createAuthToken method of the UserService returns a token
     * generated by the User model.
     *
     * It mocks the User model to return a token with a specific plainTextToken
     * and verifies that the method returns that same token.
     */
    public function testCreateAuthToken()
    {
        $user = Mockery::mock(User::class);
        $mockToken = new class {
            public $plainTextToken = 'mocked-token';
        };

        $user->shouldReceive('createToken')
            ->with('auth-token')
            ->once()
            ->andReturn($mockToken);

        $result = $this->userService->createAuthToken($user);

        $this->assertEquals('mocked-token', $result);
    }

    /**
     * Tests that the deleteTokens method of the UserService deletes all the
     * user's tokens.
     *
     * It mocks the User model to return a mock object for the tokens, and
     * verifies that the tokens' delete method is called.
     */
    public function testDeleteTokens()
    {
        $user = Mockery::mock(User::class);
        $tokensMock = Mockery::mock();

        $user->shouldReceive('tokens')
            ->once()
            ->andReturn($tokensMock);

        $tokensMock->shouldReceive('delete')
            ->once();

        $this->userService->deleteTokens($user);

        // Assert: No exception means the test passed
        $this->assertTrue(true);
    }
}
